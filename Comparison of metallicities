#matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
import numpy as np
import numpy as np
import matplotlib
from pylab import *
import warnings
import mysql.connector as sql
import datetime
import mysql.connector
from mysql.connector import Error
from mysql.connector import errorcode
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
from scipy import stats
print(datetime.datetime.now().time())
db = sql.connect(host="localhost",user="loubna", password="10ubn4", database="sdss")
c = db.cursor()
cmd='''SELECT  KE08_mw ,Z94_mw, C17_O3N2_mw,  C17_N2_mw   FROM dr15_metallicities'''

try:

    c.execute(cmd)
    rows = c.fetchall() #Fetch all (remaining) rows of a query result, returning them as a list of tuples.
except:
    pass
db.close()
print(datetime.datetime.now().time())
#This should select the spaxel ID, the objid, and the metallicity quantity from the database.


rows = np.asarray(rows) #has all the data selected in cmd

#print(rows) #mainly None values metallicities

#all_metal is a dictionary where the metallicities are named by numbers from  1 to 11 and assigned to their values

#all_metal = {1: rows[:,0] , 2:rows[:,1], 3:m}
dim = np.ndarray.ndim(rows)
all_metal = {}
k = 0
#Add data to the dictionary 
for(k <= dim):
  all_metal[dim] = rows[:,dim] 
  #cleaning the data from the None entries 
  for entryy in all_metal[dim]:
    values = []
    if np.isfinite(entryy) == True:
        values = np.append(values, entryy)
    else:
        values = np.append(values,0)
  all_metal[dim] = values
  k = k+1

print(all_metal)


 # i is the metalicity in x axis
i = 1
fig = plt.figure()
while( i <= len(all_metal) ):
  # plot i as a function of all others
  for metal  in  all_metal.keys():
    metalx = all_metal.get(metal)
    metaly = all_metal.get(i)

    print(metalx)
    print(metaly)


    #plt.plot(metalx,metaly)
    # naming the x axis
    #plt.xlabel(str(i)+' - axis')
    # naming the y axis
    #plt.ylabel(str(metal)+' - axis')

    # giving a title to my graph
    plt.title('Plot of '+str(i)+'vs'+str(metal) )
    #plt.savefig('metallicity_comparison'+str(i)+'vs'+str(metal)+'.pdf')
    # function to show the plot
    #plt.show()
  i=i+1
