#matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
import numpy as np
import numpy as np
import matplotlib
from pylab import *
import warnings
import mysql.connector as sql
import datetime
import mysql.connector
from mysql.connector import Error
from mysql.connector import errorcode
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
from scipy import stats


print(datetime.datetime.now().time())
db = sql.connect(host="localhost",user="loubna", password="10ubn4", database="sdss")
c = db.cursor()
cmd='''SELECT
Z94_mw,
 M91_mw,
 KK04_mw,
 KE08_mw ,
 D16_mw   ,
 PP04_O3N2_mw,
 PP04_N2_mw   ,
 M13_N2_mw     ,
 M13_O3N2_mw  ,
 C17_O3N2_mw   ,
 C17_N2_mw   FROM dr15_metallicities

where
Z94_mw is not NULL and
M91_mw  is not NULL and
KK04_mw  is not NULL and
KE08_mw  is not NULL and
D16_mw    is not NULL and
PP04_O3N2_mw is not NULL and
PP04_N2_mw    is not NULL and
M13_N2_mw     is not NULL and
M13_O3N2_mw   is not NULL and
C17_O3N2_mw    is not NULL and
C17_N2_mw is not NULL  '''
#cmd2='''SELECT  D16_mw  FROM dr15_metallicities'''
try:

    c.execute(cmd)

    rows = c.fetchall() #Fetch all (remaining) rows of a query result, returning them as a list of tuples.

except:
    pass
#try:
#    c.execute(cmd2)
#    rows2 = c.fetchall() #
#except:
#    pass

db.close()
print(datetime.datetime.now().time())
#This should select the spaxel ID, the objid, and the metallicity quantity from the database.


rows = np.asarray(rows) #has all the data selected in cmd

#all_metal is a dictionary where the metallicities are named by numbers from  1 to 11 and assigned to their values
num_col = len(rows[0])
#all_metal = {1: rows[:,0] , 2:rows[:,1], 3:m}
#dim = np.ndim(rows)
all_metal = {}
#dim = dim-1
for k in range(0,num_col):
    all_metal[k] = rows[:,k]


plotted = {}
#Reminder: iteration in dic is in no parti`cular order
# plot i as a function of all others
print(datetime.datetime.now().time())
for key1, val1 in all_metal.items():
    for key2, val2  in all_metal.items():
        plotted[(key1,key2)] = False

print(datetime.datetime.now().time())


for key1, val1 in all_metal.items():
    for key2, val2  in all_metal.items():
        if key1 != key2 and (plotted[(key1,key2)] == False):
            fig = plt.figure(num=key1)
            ax1=fig.add_subplot(111)
    #subfigure for axis


            hb = ax1.hexbin(val1, val2, gridsize=200, cmap='inferno',mincnt=1)
            ax1.grid()
            plotted[(key1,key2)] = True
            plotted[(key2,key1)] = True

            # naming the x axis
            ax1.set_xlabel(key1)
            # naming the y axis
            ax1.set_xlabel(key2)
            ax1.set_title("Plot comparaison between metallicity",key1,"and ",key2)
            # giving a title to graph
            #plt.title('Plot of '+key1+'vs'+key2 )
            plt.savefig('metallicity_comparison'+key1+'vs'+key2+'.pdf')
            plt.show()
